head	1.4;
access;
symbols;
locks;
comment	@ * @;


1.4
date	2022.01.12.06.46.28;	author -;	state -;
branches;
next	1.3;

1.3
date	2021.12.08.20.23.51;	author -;	state -;
branches;
next	1.2;

1.2
date	2021.12.08.20.11.13;	author -;	state -;
branches;
next	1.1;

1.1
date	2021.12.08.20.07.42;	author -;	state -;
branches;
next	;


desc
@@


1.4
log
@-
@
text
@%{
// $Id: parser.y,v 1.3 2021-12-08 12:23:51-08 - - $

#pragma GCC diagnostic ignored "-Wold-style-cast"
#pragma GCC diagnostic ignored "-Wfree-nonheap-object"

#include "lyutils.h"
#include "astree.h"

%}

%parse-param {YYSTYPE astree_root}

%debug
%defines
%error-verbose
%token-table
%verbose

%token TOK_VOID TOK_INT TOK_STRING
%token TOK_IF TOK_ELSE TOK_WHILE TOK_RETURN TOK_STRUCT
%token TOK_NULLPTR TOK_ARRAY TOK_ARROW TOK_ALLOC TOK_PTR
%token TOK_EQ TOK_NE TOK_LT TOK_LE TOK_GT TOK_GE TOK_NOT
%token TOK_IDENT TOK_INTCON TOK_CHARCON TOK_STRINGCON
%token TOK_ROOT TOK_BLOCK TOK_CALL

%start program

%%

program : program token | ;
token   : '(' | ')' | '[' | ']' | '{' | '}' | ';' | ','
        | '=' | '+' | '-' | '*' | '/' | '%' | TOK_NOT | TOK_PTR
        | TOK_ROOT TOK_VOID | TOK_INT | TOK_STRING
        | TOK_IF | TOK_ELSE | TOK_WHILE | TOK_RETURN | TOK_STRUCT
        | TOK_NULLPTR | TOK_ARRAY | TOK_ARROW | TOK_ALLOC
        | TOK_EQ | TOK_NE | TOK_LT | TOK_LE | TOK_GT | TOK_GE
        | TOK_IDENT | TOK_INTCON | TOK_CHARCON | TOK_STRINGCON
        ;

%%


const char* get_parser_yytname (int symbol) {
   return yytname [YYTRANSLATE (symbol)];
}


@


1.3
log
@-
@
text
@d2 1
a2 1
// $Id: parser.y,v 1.2 2021-12-08 12:11:13-08 - - $
d5 1
@


1.2
log
@-
@
text
@d2 1
a2 2
// $Id: parser.y,v 1.1 2021-10-15 14:23:16-07 - - $
// Dummy parser for scanner project.
d4 1
a4 1
#include <cassert>
d11 2
d43 1
a43 1
const char* parser::get_tname (int symbol) {
@


1.1
log
@-
@
text
@a0 2
// $Id: parser.y,v 1.28 2021-11-30 19:31:28-08 - - $

d2 2
d5 1
a5 1
#pragma GCC diagnostic ignored "-Wold-style-cast"
d7 1
a8 5
#include "lyutils.h"

#define ERASE(PTR) (astree::erase (PTR))

#define YYERROR_VERBOSE
a11 2
%parse-param {YYSTYPE astree_root}

d18 6
a23 10
%destructor { ERASE ($$); } <>
%printer { astree::print_symbol_value ($$); } <>

%token  ROOT IDENT NUMBER

%right  '='
%left   '+' '-'
%left   '*' '/'
%right  '^'
%right  POS NEG
d25 1
a25 1
%start  program
a26 1

d29 8
a36 20
program : stmtseq            { $$ = $1 = nullptr; }
        ;

stmtseq : stmtseq expr ';'   { ERASE ($3); $1->adopt ($2); $$ = $1; }
        | stmtseq error ';'  { ERASE ($3); $$ = $1; }
        | stmtseq ';'        { ERASE ($2); $$ = $1; }
        | %empty             { $$ = astree_root; }
        ;

expr    : expr '=' expr      { $2->adopt ($1, $3); $$ = $2; }
        | expr '+' expr      { $2->adopt ($1, $3); $$ = $2; }
        | expr '-' expr      { $2->adopt ($1, $3); $$ = $2; }
        | expr '*' expr      { $2->adopt ($1, $3); $$ = $2; }
        | expr '/' expr      { $2->adopt ($1, $3); $$ = $2; }
        | expr '^' expr      { $2->adopt ($1, $3); $$ = $2; }
        | '+' expr %prec POS { $1->adopt_as ($2, POS); $$ = $1; }
        | '-' expr %prec NEG { $1->adopt_as ($2, NEG); $$ = $1; }
        | '(' expr ')'       { ERASE ($1); ERASE ($3); $$ = $2; }
        | IDENT              { $$ = $1; }
        | NUMBER             { $$ = $1; }
d40 1
d42 1
a42 1
const char* get_parser_yytname (int symbol) {
d45 1
@
