head	1.3;
access;
symbols;
locks;
comment	@ * @;


1.3
date	2021.12.08.20.23.51;	author -;	state -;
branches;
next	1.2;

1.2
date	2021.12.08.20.11.13;	author -;	state -;
branches;
next	1.1;

1.1
date	2021.12.08.20.07.42;	author -;	state -;
branches;
next	;


desc
@@


1.3
log
@-
@
text
@/* $Id: scanner.l,v 1.2 2021-12-08 12:11:13-08 - - $ */

%{

#pragma GCC diagnostic ignored "-Wold-style-cast"
#pragma GCC diagnostic ignored "-Wunused-function"

#include "lyutils.h"

#define YY_USER_ACTION  { lexer.advance(); }
#define YY_FATAL_ERROR(msg) { lexer.lex_fatal_error (msg); }

%}

%option 8bit
%option debug
%option nobackup
%option nodefault
%option noinput
%option nounput
%option noyywrap
%option warn

%%

^"#".*\n        { lexer.include(); lexer.newline(); }
[ \t]+          { }
\n              { lexer.newline(); }
[^ \t\n]+       { return lexer.token (TOK_IDENT); }

%%

@


1.2
log
@-
@
text
@d1 1
a1 1
/* $Id: lexer.l,v 1.2 2021-10-16 10:39:33-07 - - $ */
d5 3
d10 2
a11 2
#define YY_USER_ACTION  { lexer::advance(); }
#define YY_FATAL_ERROR(msg) { lexer::fatal_error (msg); }
d26 1
a26 1
^"#".*\n        { lexer::include(); lexer::newline(); }
d28 2
a29 2
\n              { lexer::newline(); }
[^ \t\n]+       { return lexer::token (IDENT); }
@


1.1
log
@-
@
text
@d1 1
a1 1
/* $Id: scanner.l,v 1.10 2021-11-30 19:31:28-08 - - $ */
a4 3
#pragma GCC diagnostic ignored "-Wold-style-cast"
#pragma GCC diagnostic ignored "-Wunused-function"

d7 2
a8 2
#define YY_FATAL_ERROR(msg) { lexer.lex_fatal_error (msg); }
#define YY_USER_ACTION  { lexer.advance(); }
d14 1
a20 8
LETTER          [A-Za-z_]
DIGIT           [0-9]
MANTISSA        ({DIGIT}+\.?{DIGIT}*|\.{DIGIT}+)
EXPONENT        ([Ee][+-]?{DIGIT}+)
NUMBER          ({MANTISSA}{EXPONENT}?)
NOTNUMBER       ({MANTISSA}[Ee][+-]?)
IDENT           ({LETTER}({LETTER}|{DIGIT})*)

d23 1
a23 1
"#".*\n         { lexer.include(); lexer.newline(); }
d25 2
a26 16
\n              { lexer.newline(); }

{NUMBER}        { return lexer.token (NUMBER); }
{IDENT}         { return lexer.token (IDENT); }
"="             { return lexer.token ('='); }
"+"             { return lexer.token ('+'); }
"-"             { return lexer.token ('-'); }
"*"             { return lexer.token ('*'); }
"/"             { return lexer.token ('/'); }
"^"             { return lexer.token ('^'); }
"("             { return lexer.token ('('); }
")"             { return lexer.token (')'); }
";"             { return lexer.token (';'); }

{NOTNUMBER}     { return lexer.badtoken (NUMBER); }
.               { lexer.badchar (*yytext); }
@
